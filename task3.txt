# Import necessary libraries
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model training using scikit-learn (Random Forest Classifier)
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred_rf = rf_classifier.predict(X_test_scaled)
print("Random Forest Classifier Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Classification Report:")
print(classification_report(y_test, y_pred_rf))

# Model training using TensorFlow
model_tf = Sequential([
    Dense(64, activation='relu', input_shape=(4,)),
    Dense(64, activation='relu'),
    Dense(3, activation='softmax')  # Output layer with 3 units for 3 classes and softmax activation
])

model_tf.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model_tf.fit(X_train_scaled, y_train, epochs=50, batch_size=32, verbose=0)

# Evaluate the model
test_loss, test_accuracy = model_tf.evaluate(X_test_scaled, y_test, verbose=0)
print("TensorFlow Model Accuracy:", test_accuracy)

# Example prediction
sample_data = np.array([[5.1, 3.5, 1.4, 0.2]])  # Example iris measurements
sample_data_scaled = scaler.transform(sample_data)
prediction = model_tf.predict(sample_data_scaled)
predicted_class = np.argmax(prediction)
print("Predicted class:", iris.target_names[predicted_class])S